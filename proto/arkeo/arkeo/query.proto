syntax = "proto3";
package arkeo.arkeo;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "arkeo/arkeo/params.proto";
import "arkeo/arkeo/keeper.proto";
// this line is used by starport scaffolding # 1

option go_package = "arkeo/x/arkeo/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/arkeo/params";
  }
  rpc FetchProvider(QueryFetchProviderRequest)
      returns (QueryFetchProviderResponse) {
    option (google.api.http).get = "/arkeo/provider/{pubkey}/{chain}";
  }
  rpc ProviderAll(QueryAllProviderRequest) returns (QueryAllProviderResponse) {
    option (google.api.http).get = "/arkeo/providers";
  }

  rpc FetchContract(QueryFetchContractRequest)
      returns (QueryFetchContractResponse) {
    option (google.api.http).get = "/arkeo/contract/{pubkey}/{chain}/{client}";
  }
  rpc ContractAll(QueryAllContractRequest) returns (QueryAllContractResponse) {
    option (google.api.http).get = "/arkeo/contracts";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryFetchProviderRequest {
  string pubkey = 1;
  string chain = 2;
}

message QueryFetchProviderResponse {
  Provider provider = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllProviderRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllProviderResponse {
  repeated Provider provider = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFetchContractRequest {
  string pubkey = 1;
  string chain = 2;
  string client = 3;
}

message QueryFetchContractResponse {
  Contract contract = 1 [ (gogoproto.nullable) = false ];
}

message QueryAllContractRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllContractResponse {
  repeated Contract contract = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
